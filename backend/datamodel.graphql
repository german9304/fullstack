type User {
  id: ID! @id
  email: String! @unique
  name: String!
  password: String!
  createdAt: DateTime! @createdAt
  posts: [Post] @relation(name: "PostsByUser", onDelete: CASCADE)
  likes: [Like] @relation(name: "LikesByUser", onDelete: CASCADE)
  comments: [Comment] @relation(name: "CommentsByUser", onDelete: CASCADE)
}

type Post {
  id: ID! @id
  header: String!
  body: String!
  picture: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  author: User! @relation(name: "PostsByUser", link: INLINE)
  comments: [Comment] @relation(name: "CommentsByPost", onDelete: CASCADE)
  likes: Like @relation(name: "LikesByPost", onDelete: CASCADE)
}

type Comment {
  id: ID! @id
  body: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  author: User! @relation(name: "CommentsByUser", link: INLINE)
  post: Post! @relation(name: "CommentsByPost", link: INLINE)
  likes: Like @relation(name: "LikesByComment", onDelete: CASCADE)
}

type Like {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  quantity: Int @default(value: 0)
  user: User! @relation(name: "LikesByUser", link: INLINE)
  comment: Comment @relation(name: "LikesByComment", link: INLINE)
  post: Post @relation(name: "LikesByPost", link: INLINE)
}
